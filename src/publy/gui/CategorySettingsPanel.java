/*
 */
package publy.gui;

import java.util.EnumSet;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import publy.data.category.CategoryIdentifier;
import publy.data.settings.FormatSettings;

/**
 *
 * @author Sander Verdonschot <sander.verdonschot at gmail.com>
 */
public class CategorySettingsPanel extends javax.swing.JPanel {

    private FormatSettings settings;
    private DefaultListModel<CategoryIdentifier> inListModel;
    private DefaultListModel<CategoryIdentifier> outListModel;
    private CategoryIdentifier selectedCategory = null;

    /**
     * Empty constructor, for use in the NetBeans GUI editor.
     */
    public CategorySettingsPanel() {
        initComponents();
    }

    /**
     * Creates new form FileSettingsPanel
     */
    public CategorySettingsPanel(FormatSettings settings) {
        this.settings = settings;
        initComponents();
        populateValues();
    }

    @SuppressWarnings("unchecked")
    private void populateValues() {
        // Categories
        inListModel = new DefaultListModel<>();
        outListModel = new DefaultListModel<>();

        Set<CategoryIdentifier> out = EnumSet.allOf(CategoryIdentifier.class);

        for (CategoryIdentifier c : settings.getCategories()) {
            inListModel.addElement(c);
            out.remove(c);
        }

        for (CategoryIdentifier c : out) {
            outListModel.addElement(c);
        }

        inCatList.setModel(inListModel);
        outCatList.setModel(outListModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inCatScrollPane = new javax.swing.JScrollPane();
        inCatList = new javax.swing.JList();
        catPanel = new javax.swing.JPanel();
        noteLabel = new javax.swing.JLabel();
        noteSeparator = new javax.swing.JSeparator();
        noteTextField = new javax.swing.JTextField();
        catLabel = new javax.swing.JLabel();
        catSeparator = new javax.swing.JSeparator();
        inButton = new javax.swing.JButton();
        outButton = new javax.swing.JButton();
        catButtonSeparator = new javax.swing.JSeparator();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        outCatScrollPane = new javax.swing.JScrollPane();
        outCatList = new javax.swing.JList();

        inCatList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        inCatList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        inCatList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                inCatListValueChanged(evt);
            }
        });
        inCatScrollPane.setViewportView(inCatList);

        catPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Category Properties", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(51, 51, 102))); // NOI18N

        noteLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        noteLabel.setForeground(new java.awt.Color(51, 51, 102));
        noteLabel.setText("Note");

        noteTextField.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                noteTextFieldTextChanged(e);
            }
            public void removeUpdate(DocumentEvent e) {
                noteTextFieldTextChanged(e);
            }
            public void changedUpdate(DocumentEvent e) {
                //Plain text components do not fire these events
            }
        });
        noteTextField.setColumns(20);
        noteTextField.setToolTipText("This text will be inserted after the category heading, before the publications in the category.");
        noteTextField.setEnabled(false);

        javax.swing.GroupLayout catPanelLayout = new javax.swing.GroupLayout(catPanel);
        catPanel.setLayout(catPanelLayout);
        catPanelLayout.setHorizontalGroup(
            catPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(catPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(catPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(catPanelLayout.createSequentialGroup()
                        .addComponent(noteLabel)
                        .addGap(4, 4, 4)
                        .addComponent(noteSeparator))
                    .addComponent(noteTextField))
                .addContainerGap())
        );
        catPanelLayout.setVerticalGroup(
            catPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(catPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(catPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(noteSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noteLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(noteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        catLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        catLabel.setForeground(new java.awt.Color(51, 51, 102));
        catLabel.setText("Category selection");

        inButton.setText("<html>&larr;</html>");
        inButton.setToolTipText("Include the selected category.");
        inButton.setEnabled(false);
        inButton.setPreferredSize(new java.awt.Dimension(43, 33));
        inButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inButtonActionPerformed(evt);
            }
        });

        outButton.setText("<html>&rarr;</html>");
        outButton.setToolTipText("Remove the selected category.");
        outButton.setEnabled(false);
        outButton.setPreferredSize(new java.awt.Dimension(43, 33));
        outButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outButtonActionPerformed(evt);
            }
        });

        upButton.setText("<html>&uarr;</html>");
        upButton.setToolTipText("Move the selected category up.");
        upButton.setEnabled(false);
        upButton.setPreferredSize(new java.awt.Dimension(43, 33));
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        downButton.setText("<html>&darr;</html>");
        downButton.setToolTipText("Move the selected category down.");
        downButton.setEnabled(false);
        downButton.setPreferredSize(new java.awt.Dimension(43, 33));
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        outCatList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        outCatList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        outCatList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                outCatListValueChanged(evt);
            }
        });
        outCatScrollPane.setViewportView(outCatList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(catLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(catSeparator))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(inCatScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(outButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(upButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(downButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(catButtonSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outCatScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(catPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {inCatScrollPane, outCatScrollPane});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {catButtonSeparator, downButton, outButton, upButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(catLabel)
                    .addComponent(catSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(inButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(catButtonSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(upButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(downButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(inCatScrollPane)
                    .addComponent(outCatScrollPane))
                .addGap(18, 18, 18)
                .addComponent(catPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {downButton, inButton, outButton, upButton});

    }// </editor-fold>//GEN-END:initComponents

    private void noteTextFieldTextChanged(javax.swing.event.DocumentEvent evt) {
        // Update the settings
        if (selectedCategory != null) {
            settings.getCategoryNotes().put(selectedCategory, noteTextField.getText());
        }
    }

    private void setSelectedCategory(CategoryIdentifier c) {
        selectedCategory = c;

        if (c == null) {
            // Note
            noteTextField.setText("");
            noteTextField.setEnabled(false);
        } else {
            // Note
            noteTextField.setText(settings.getCategoryNotes().get(c));
            noteTextField.setEnabled(true);
        }
    }

    private void inCatListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_inCatListValueChanged
        if (!evt.getValueIsAdjusting()) {
            int selected = inCatList.getSelectedIndex();

            if (selected == -1) {
                // No selection, disable buttons
                outButton.setEnabled(false);
                upButton.setEnabled(false);
                downButton.setEnabled(false);

                if (outCatList.getSelectedIndex() == -1) {
                    // No selection at all, disable category settings
                    setSelectedCategory(null);
                }
            } else {
                // Selection, enable buttons
                outButton.setEnabled(true);

                upButton.setEnabled(selected > 0);
                downButton.setEnabled(selected < inListModel.getSize() - 1);

                // Remove selection in the out list
                outCatList.clearSelection();

                setSelectedCategory((CategoryIdentifier) inCatList.getSelectedValue());
            }
        }
    }//GEN-LAST:event_inCatListValueChanged

    private void inButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inButtonActionPerformed
        CategoryIdentifier selected = (CategoryIdentifier) outCatList.getSelectedValue();

        // Update the UI
        inListModel.addElement(selected);
        outListModel.removeElement(selected);

        inCatList.setSelectedValue(selected, true);

        // Update the settings
        settings.getCategories().add(selected);
    }//GEN-LAST:event_inButtonActionPerformed

    private void outButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outButtonActionPerformed
        CategoryIdentifier selected = (CategoryIdentifier) inCatList.getSelectedValue();

        // Update the UI
        outListModel.addElement(selected);
        inListModel.removeElement(selected);

        outCatList.setSelectedValue(selected, true);

        // Update the settings
        settings.getCategories().remove(selected);
    }//GEN-LAST:event_outButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        int selected = inCatList.getSelectedIndex();

        if (selected > 0) {
            // Update the UI
            CategoryIdentifier up = inListModel.set(selected - 1, selectedCategory);
            inListModel.set(selected, up);
            inCatList.setSelectedValue(selectedCategory, true);

            // Update the settings
            settings.getCategories().set(selected - 1, selectedCategory);
            settings.getCategories().set(selected, up);
        }
    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        int selected = inCatList.getSelectedIndex();

        if (selected < inListModel.getSize() - 1) {
            // Update the UI
            CategoryIdentifier down = inListModel.set(selected + 1, selectedCategory);
            inListModel.set(selected, down);
            inCatList.setSelectedValue(selectedCategory, true);

            // Update the settings
            settings.getCategories().set(selected + 1, selectedCategory);
            settings.getCategories().set(selected, down);
        }
    }//GEN-LAST:event_downButtonActionPerformed

    private void outCatListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_outCatListValueChanged
        if (!evt.getValueIsAdjusting()) {
            if (outCatList.getSelectedIndex() == -1) {
                //No selection, disable button
                inButton.setEnabled(false);

                if (inCatList.getSelectedIndex() == -1) {
                    // No selection at all, disable category settings
                    setSelectedCategory(null);
                }
            } else {
                //Selection, enable button
                inButton.setEnabled(true);

                // Remove selection in the in list
                inCatList.clearSelection();

                setSelectedCategory((CategoryIdentifier) outCatList.getSelectedValue());
            }
        }
    }//GEN-LAST:event_outCatListValueChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator catButtonSeparator;
    private javax.swing.JLabel catLabel;
    private javax.swing.JPanel catPanel;
    private javax.swing.JSeparator catSeparator;
    private javax.swing.JButton downButton;
    private javax.swing.JButton inButton;
    private javax.swing.JList inCatList;
    private javax.swing.JScrollPane inCatScrollPane;
    private javax.swing.JLabel noteLabel;
    private javax.swing.JSeparator noteSeparator;
    private javax.swing.JTextField noteTextField;
    private javax.swing.JButton outButton;
    private javax.swing.JList outCatList;
    private javax.swing.JScrollPane outCatScrollPane;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables
}
